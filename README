#To Check ubuntu 22.04 Version check
lsb_release -a

sudo swapoff -a
sudo sed -i '/swap/s/^/#/' /etc/fstab
sudo hostnamectl set-hostname "master-node"
exec bash

sudo nano /etc/hosts
  # at last line of file: Add following Master and Worker machines
  172.31.33.240 QuantumK8s-Master
  172.31.6.95 QUantumK8s-Worker1

cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF

sudo modprobe overlay
sudo modprobe br_netfilter

cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF

# Apply sysctl params without reboot
sudo sysctl --system

sudo apt update -y

sudo apt-get install -y apt-transport-https ca-certificates curl gnupg

sudo mkdir /etc/apt/keyrings
# If the folder `/etc/apt/keyrings` does not exist, it should be created before the curl command, read the note below.
# sudo mkdir -p -m 755 /etc/apt/keyrings

curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
sudo chmod 644 /etc/apt/keyrings/kubernetes-apt-keyring.gpg

# This overwrites any existing configuration in /etc/apt/sources.list.d/kubernetes.list
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
sudo chmod 644 /etc/apt/sources.list.d/kubernetes.list   # helps tools such as command-not-found to work correctly

# Change Repository List added above
sudo nano /etc/apt/sources.list.d/kubernetes.list

sudo apt update -y

# To view list of avaialble kubelet, kubectl, kubeadm
sudo apt list kubelet kubectl kubeadm

# To install
sudo apt install -y kubelet kubeadm kubectl

# To install Docker
sudo apt install docker.io

sudo mkdir /etc/containerd
sudo sh -c "containerd config default > /etc/containerd/config.toml"
sudo sed -i 's/ SystemdCgroup = false/ SystemdCgroup = true/' /etc/containerd/config.toml
sudo systemctl restart containerd.service
sudo systemctl restart kubelet.service

systemctl restart containerd

# If fetching any errors regarding Docker and even not, then also need to exe
cat <<EOF | sudo tee /etc/docker/daemon.json
{
    "exec-opts": ["native.cgroupdriver=systemd"],
    "log-driver": "json-file",
    "log-opts": {
        "max-size": "100m"
    },
    "storage-driver": "overlay2"
}
EOF

systemctl daemon-reload
systemctl enable docker
systemctl status containerd
systemctl status docker

sudo apt-get update

# To hold auto updates versions
sudo apt-mark hold kubelet kubeadm kubectl

## ONLY FOR MASTER NODE 

## Kubect Reset only
#kubeadm reset

kubeadm init --apiserver-advertise-address=172.31.33.240 --pod-network-cidr=10.10.0.0/16


# To reprint worker node join command
# sudo kubeadm token create --print-join-command

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

# Weave Network
kubectl apply -f https://github.com/weaveworks/weave/releases/download/v2.8.1/weave-daemonset-k8s.yaml

# ARGO WORKFLOW INSTALLATION
# https://github.com/argoproj/argo-workflows/releases/tag/v3.5.10

# Download the binary
curl -sLO https://github.com/argoproj/argo-workflows/releases/download/v3.5.10/argo-linux-amd64.gz

# Unzip
gunzip argo-linux-amd64.gz

# Make binary executable
chmod +x argo-linux-amd64

# Move binary to path
mv ./argo-linux-amd64 /usr/local/bin/argo

# Test installation
argo version


# Controll & Server
kubectl create namespace argo
kubectl apply -n argo -f https://github.com/argoproj/argo-workflows/releases/download/v3.5.10/install.yaml














